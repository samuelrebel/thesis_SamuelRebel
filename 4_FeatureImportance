{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25187,"status":"ok","timestamp":1751182541650,"user":{"displayName":"Samuel Rebel","userId":"12523763533102592733"},"user_tz":-120},"id":"q625S0snFnHy","outputId":"617a68cb-57ba-4019-91d3-75d8ba59ad92"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["import os, re, glob\n","import numpy as np\n","import pandas as pd\n","import geopandas as gpd\n","from shapely import wkt\n","from sklearn.feature_selection import VarianceThreshold\n","from sklearn.ensemble import RandomForestRegressor\n","from xgboost import XGBRegressor\n","from lightgbm import LGBMRegressor\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3691248,"status":"ok","timestamp":1750424352982,"user":{"displayName":"Samuel Rebel","userId":"12523763533102592733"},"user_tz":-120},"id":"-oymDQpPErNI","outputId":"74590419-ed20-4e5f-82f5-1eff930ac802"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n",">>> Processing: Carbamazepine_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-8-4220515583.py:102: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/Carbamazepine_SW_top10_features.png\n","\n",">>> Processing: Diclofenac_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-8-4220515583.py:102: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/Diclofenac_SW_top10_features.png\n","\n",">>> Processing: DO_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-8-4220515583.py:102: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/DO_SW_top10_features.png\n","\n",">>> Processing: PFOS_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-8-4220515583.py:102: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/PFOS_SW_top10_features.png\n","\n",">>> Processing: TSS_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-8-4220515583.py:102: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/TSS_SW_top10_features.png\n","\n",">>> Processing: TN_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-8-4220515583.py:102: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/TN_SW_top10_features.png\n"]}],"source":["def load_features(features_path):\n","    \"\"\"\n","    Load spatial feature data from CSV and return a GeoDataFrame along with static and monthly column names.\n","    \"\"\"\n","    gdf = pd.read_csv(features_path)\n","    gdf[\"geometry\"] = gdf[\"geometry\"].apply(wkt.loads)\n","    gdf = gpd.GeoDataFrame(gdf, geometry=\"geometry\", crs=\"EPSG:4326\")\n","    monthly_cols = [c for c in gdf.columns if re.search(r'_s(0[1-9]|1[0-2])$', c)]\n","    static_cols = [c for c in gdf.columns if c not in monthly_cols and c != \"geometry\"]\n","    return gdf, static_cols, monthly_cols\n","\n","\n","def build_joined_features(obs_path, gdf_feats, static_cols, monthly_cols):\n","    \"\"\"\n","    Join monthly pollutant observations with matching spatial features based on geometry and month.\n","    Returns a GeoDataFrame with predictors joined to each observation.\n","    \"\"\"\n","    df_obs = pd.read_csv(obs_path)\n","    gdf_obs = gpd.GeoDataFrame(\n","        df_obs,\n","        geometry=gpd.points_from_xy(df_obs.Longitude, df_obs.Latitude),\n","        crs=\"EPSG:4326\"\n","    )\n","    gdf_obs_sel = gdf_obs[[\"geometry\", \"obs\", \"country_name\", \"site_id\", \"pollutant\", \"month\", \"hydbas\"]]\n","    feats_static = gdf_feats[static_cols + [\"geometry\"]].to_crs(gdf_obs_sel.crs)\n","    gdf_stat = gpd.sjoin(gdf_obs_sel, feats_static, how=\"left\", predicate=\"within\").drop(columns=\"index_right\")\n","\n","    rows = []\n","    for m in range(1, 13):\n","        obs_m = gdf_stat[gdf_stat.month == m].copy()\n","        if obs_m.empty:\n","            continue\n","        suffix = f\"_s{m:02d}\"\n","        feats_m = gdf_feats[static_cols + [\"geometry\"] + [c for c in monthly_cols if c.endswith(suffix)]].copy()\n","        feats_m = feats_m.rename(columns={c: c.rsplit(\"_\", 1)[0] for c in feats_m.columns if c.endswith(suffix)})\n","        join_m = gpd.sjoin(obs_m, feats_m, how=\"left\", predicate=\"within\").drop(columns=\"index_right\")\n","        rows.append(join_m)\n","\n","    if not rows:\n","        return None\n","\n","    gdf_full = pd.concat(rows, ignore_index=True)\n","    gdf_full.columns = [re.sub(r'_(left|right)$', '', col) for col in gdf_full.columns]\n","    gdf_full = gdf_full.loc[:, ~gdf_full.columns.duplicated()]\n","\n","    fill_cols = ['tmp_dc', 'pre_mm', 'pet_mm', 'aet_mm', 'cmi_ix', 'snw_pc',\n","                 'glc_pc', 'pnv_pc', 'wet_pc', 'swc_pc', 'hft_ix']\n","    for col in fill_cols:\n","        if col in gdf_full.columns:\n","            gdf_full[col] = gdf_full[col].fillna(0)\n","\n","    return gdf_full\n","\n","\n","def compute_feature_importances(gdf_feats, static_cols, monthly_cols, pollutant_dir, out_dir):\n","    \"\"\"\n","    For each pollutant file, join features, train three models (RF, XGB, LGBM),\n","    and extract and plot the top 5 feature importances. Saves results as plots and CSV.\n","    \"\"\"\n","    os.makedirs(out_dir, exist_ok=True)\n","    pollutant_files = glob.glob(os.path.join(pollutant_dir, \"*.csv\"))\n","    all_top10 = []\n","\n","    for fp in pollutant_files:\n","        pollutant_name = os.path.splitext(os.path.basename(fp))[0]\n","        print(f\"\\n>>> Processing: {pollutant_name}\")\n","\n","        gdf_full = build_joined_features(fp, gdf_feats, static_cols, monthly_cols)\n","        if gdf_full is None or gdf_full.empty:\n","            print(\"  ⚠️ No joined features found. Skipping.\")\n","            continue\n","\n","        exclude = [\"geometry\", \"obs\", \"country_name\", \"site_id\", \"pollutant\", \"hydbas\"]\n","        feature_cols = [c for c in gdf_full.columns if c not in exclude]\n","        gdf_clean = gdf_full.dropna(subset=[\"obs\"] + feature_cols)\n","        if gdf_clean.empty:\n","            print(\"  ⚠️ No valid rows after cleaning. Skipping.\")\n","            continue\n","\n","        X_all = gdf_clean[feature_cols].astype(np.float32)\n","        y = gdf_clean[\"obs\"].astype(np.float32)\n","\n","        selector = VarianceThreshold(threshold=0.01)\n","        selector.fit(X_all)\n","        keep_cols = X_all.columns[selector.get_support()]\n","        X_reduced = X_all[keep_cols]\n","\n","        models = {\n","            \"RF\":  RandomForestRegressor(n_estimators=200, random_state=42, n_jobs=-1),\n","            \"XGB\": XGBRegressor(n_estimators=200, learning_rate=0.05, random_state=42, n_jobs=-1),\n","            \"LGBM\":LGBMRegressor(n_estimators=200, learning_rate=0.05, random_state=42, verbose=-1)\n","        }\n","        importances = {}\n","        for name, mdl in models.items():\n","            mdl.fit(X_reduced, y)\n","            raw_imp = mdl.feature_importances_\n","            norm_imp = raw_imp / raw_imp.sum()\n","            importances[name] = norm_imp\n","\n","        imp_df = pd.DataFrame(importances, index=X_reduced.columns)\n","        imp_df['mean_imp'] = imp_df.mean(axis=1)\n","        top10 = imp_df.nlargest(5, 'mean_imp').drop(columns='mean_imp')\n","\n","        top_long = top10.reset_index().melt(id_vars='index', var_name='Model', value_name='Importance')\n","        top_long[\"Pollutant\"] = pollutant_name\n","        all_top10.append(top_long)\n","\n","        plt.figure(figsize=(10, 6))\n","        sns.barplot(data=top_long, x='Importance', y='index', hue='Model', ci=None)\n","        plt.title(f\"Top 5 Feature Importances — {pollutant_name}\")\n","        plt.xlabel(\"Relative Importance (sum = 1 per model)\")\n","        plt.ylabel(\"Feature\")\n","        plt.legend(title=\"Model\")\n","        plt.tight_layout()\n","\n","        out_path = os.path.join(out_dir, f\"{pollutant_name}_top10_features.png\")\n","        plt.savefig(out_path, dpi=300, bbox_inches='tight')\n","        plt.close()\n","        print(f\"Saved plot to {out_path}\")\n","\n","    df_all = pd.concat(all_top10)\n","    df_all.to_csv(os.path.join(out_dir, \"all_pollutants_top10.csv\"), index=False)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"wqMK5I-TPDMe","outputId":"a088fee8-62c1-42fd-f6b3-fe86ef020a8c"},"outputs":[{"name":"stdout","output_type":"stream","text":["\n",">>> Processing: TN_SW\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipython-input-3-2464841964.py:126: FutureWarning: \n","\n","The `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n","\n","  sns.barplot(data=top_long, x='Importance', y='Feature', hue='Model', ci=None)\n"]},{"name":"stdout","output_type":"stream","text":["  ✔️ Saved plot to /content/drive/MyDrive/data_scriptie/Output/pollutants_monthly/feature_importance/TN_SW_top5_features.png\n"]}],"source":["def load_features(features_path):\n","    \"\"\"\n","    Load feature data from a CSV file, convert geometry column to GeoDataFrame format,\n","    and return the full GeoDataFrame along with lists of static and monthly feature columns.\n","    \"\"\"\n","    gdf = pd.read_csv(features_path)\n","    gdf[\"geometry\"] = gdf[\"geometry\"].apply(wkt.loads)\n","    gdf = gpd.GeoDataFrame(gdf, geometry=\"geometry\", crs=\"EPSG:4326\")\n","    monthly_cols = [c for c in gdf.columns if re.search(r'_s(0[1-9]|1[0-2])$', c)]\n","    static_cols = [c for c in gdf.columns if c not in monthly_cols and c != \"geometry\"]\n","    return gdf, static_cols, monthly_cols\n","\n","\n","def build_joined_features(obs_path, gdf_feats, static_cols, monthly_cols):\n","    \"\"\"\n","    Join monthly pollutant observations with static and monthly spatial features\n","    using spatial joins and monthly suffix alignment. Returns enriched GeoDataFrame.\n","    \"\"\"\n","    df_obs = pd.read_csv(obs_path)\n","    gdf_obs = gpd.GeoDataFrame(\n","        df_obs,\n","        geometry=gpd.points_from_xy(df_obs.Longitude, df_obs.Latitude),\n","        crs=\"EPSG:4326\"\n","    )\n","    gdf_obs_sel = gdf_obs[[\"geometry\", \"obs\", \"country_name\", \"site_id\", \"pollutant\", \"month\", \"hydbas\"]]\n","    feats_static = gdf_feats[static_cols + [\"geometry\"]].to_crs(gdf_obs_sel.crs)\n","    gdf_stat = gpd.sjoin(gdf_obs_sel, feats_static, how=\"left\", predicate=\"within\").drop(columns=\"index_right\")\n","\n","    rows = []\n","    for m in range(1, 13):\n","        obs_m = gdf_stat[gdf_stat.month == m].copy()\n","        if obs_m.empty:\n","            continue\n","        suffix = f\"_s{m:02d}\"\n","        feats_m = gdf_feats[static_cols + [\"geometry\"] + [c for c in monthly_cols if c.endswith(suffix)]].copy()\n","        feats_m = feats_m.rename(columns={c: c.rsplit(\"_\", 1)[0] for c in feats_m.columns if c.endswith(suffix)})\n","        join_m = gpd.sjoin(obs_m, feats_m, how=\"left\", predicate=\"within\").drop(columns=\"index_right\")\n","        rows.append(join_m)\n","\n","    if not rows:\n","        return None\n","\n","    gdf_full = pd.concat(rows, ignore_index=True)\n","    gdf_full.columns = [re.sub(r'_(left|right)$', '', col) for col in gdf_full.columns]\n","    gdf_full = gdf_full.loc[:, ~gdf_full.columns.duplicated()]\n","\n","    fill_cols = ['tmp_dc', 'pre_mm', 'pet_mm', 'aet_mm', 'cmi_ix', 'snw_pc',\n","                 'glc_pc', 'pnv_pc', 'wet_pc', 'swc_pc', 'hft_ix']\n","    for col in fill_cols:\n","        if col in gdf_full.columns:\n","            gdf_full[col] = gdf_full[col].fillna(0)\n","\n","    return gdf_full\n","\n","\n","def compute_feature_importances(gdf_feats, static_cols, monthly_cols, pollutant_dir, out_dir):\n","    \"\"\"\n","    For each pollutant:\n","    - Join observations with spatial predictors,\n","    - Fit three ML models (RF, XGB, LGBM),\n","    - Extract and normalize feature importances,\n","    - Plot the top 5 features per model,\n","    - Save all results to image and CSV files.\n","    \"\"\"\n","    os.makedirs(out_dir, exist_ok=True)\n","    pollutant_files = glob.glob(os.path.join(pollutant_dir, \"*.csv\"))\n","    all_top5 = []\n","\n","    feature_label_map = {\n","        \"ppd_pk_uav\": \"Population density\",\n","        \"swc_pc_syr\": \"Soil water content\",\n","        \"rdd_mk_uav\": \"Road density\",\n","        \"ele_mt_smn\": \"Elevation\",\n","        \"HYBAS_ID\": \"Sub-basin ID\",\n","        \"cls_cl_smj\": \"Industrial land use\",\n","        \"tec_cl_smj\": \"Tech-related land\",\n","        \"sgr_dk_sav\": \"Settlement growth rate\",\n","        \"DIST_SINK\": \"Distance to sink\",\n","        \"pre_mm\": \"Precipitation\",\n","        \"tmp_dc\": \"Temperature\",\n","        \"pet_mm_uyr\": \"Potential evapotranspiration\",\n","        \"swc_pc_uyr\": \"Soil water content (year)\",\n","        \"snw_pc_smx\": \"Snow cover (max)\",\n","        \"glc_pc_s22\": \"Land cover (S22)\",\n","        \"hft_ix_u09\": \"Human footprint\",\n","        \"aet_mm\": \"Actual evapotranspiration\",\n","        \"kar_pc_use\": \"Karst terrain % used\",\n","        \"pnv_pc_u01\": \"Potential vegetation cover\",\n","        \"upstream_mean_flow_accumulation\": \"Flow accumulation\",\n","        \"sub_area_log\": \"Log basin area\",\n","        \"glc_pc_u22\": \"Land cover (U22)\"\n","    }\n","\n","    for fp in pollutant_files:\n","        pollutant_name = os.path.splitext(os.path.basename(fp))[0]\n","        print(f\"\\n>>> Processing: {pollutant_name}\")\n","\n","        gdf_full = build_joined_features(fp, gdf_feats, static_cols, monthly_cols)\n","        if gdf_full is None or gdf_full.empty:\n","            print(\"  ⚠️ No joined features found. Skipping.\")\n","            continue\n","\n","        exclude = [\"geometry\", \"obs\", \"country_name\", \"site_id\", \"pollutant\", \"hydbas\", \"HYBAS_ID\"]\n","        feature_cols = [c for c in gdf_full.columns if c not in exclude]\n","        gdf_clean = gdf_full.dropna(subset=[\"obs\"] + feature_cols)\n","        if gdf_clean.empty:\n","            print(\"  ⚠️ No valid rows after cleaning. Skipping.\")\n","            continue\n","\n","        X_all = gdf_clean[feature_cols].astype(np.float32)\n","        y = gdf_clean[\"obs\"].astype(np.float32)\n","\n","        selector = VarianceThreshold(threshold=0.01)\n","        selector.fit(X_all)\n","        keep_cols = X_all.columns[selector.get_support()]\n","        X_reduced = X_all[keep_cols]\n","\n","        models = {\n","            \"RF\": RandomForestRegressor(n_estimators=200, random_state=42, n_jobs=-1),\n","            \"XGB\": XGBRegressor(n_estimators=200, learning_rate=0.05, random_state=42, n_jobs=-1),\n","            \"LGBM\": LGBMRegressor(n_estimators=200, learning_rate=0.05, random_state=42, verbose=-1)\n","        }\n","\n","        importances = {}\n","        for name, mdl in models.items():\n","            mdl.fit(X_reduced, y)\n","            raw_imp = mdl.feature_importances_\n","            norm_imp = raw_imp / raw_imp.sum()\n","            importances[name] = norm_imp\n","\n","        imp_df = pd.DataFrame(importances, index=X_reduced.columns)\n","        imp_df['mean_imp'] = imp_df.mean(axis=1)\n","        top5 = imp_df.nlargest(5, 'mean_imp').drop(columns='mean_imp')\n","\n","        top_long = top5.reset_index().melt(id_vars='index', var_name='Model', value_name='Importance')\n","        top_long[\"Feature\"] = top_long[\"index\"].map(feature_label_map).fillna(top_long[\"index\"])\n","        top_long[\"Pollutant\"] = pollutant_name\n","        all_top5.append(top_long)\n","\n","        plt.figure(figsize=(10, 6))\n","        sns.barplot(data=top_long, x='Importance', y='Feature', hue='Model', ci=None)\n","        clean_title = pollutant_name.replace(\"_SW\", \"\").replace(\"_\", \" \")\n","        plt.title(f\"Top 5 Feature Importances — {clean_title}\")\n","        plt.xlabel(\"Relative Importance (sum = 1 per model)\")\n","        plt.ylabel(\"Feature\")\n","        plt.legend(title=\"Model\")\n","        plt.tight_layout()\n","\n","        out_path = os.path.join(out_dir, f\"{pollutant_name}_top5_features.png\")\n","        plt.savefig(out_path, dpi=300, bbox_inches='tight')\n","        plt.close()\n","        print(f\"Saved plot to {out_path}\")\n","\n","    df_all = pd.concat(all_top5)\n","    df_all.to_csv(os.path.join(\n"]}],"metadata":{"colab":{"machine_shape":"hm","provenance":[],"authorship_tag":"ABX9TyOy6/r1yPVU2neEsRtcSRNL"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}